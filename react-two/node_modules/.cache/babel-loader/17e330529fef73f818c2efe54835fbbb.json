{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\um3is\\\\Desktop\\\\Projects\\\\Projects\\\\react-two\\\\src\\\\Slider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import SliderData from \"./SliderData\";\n// import SliderDataTwo from \"./SliderDataTwo\";\n\nimport { FaArrowAltCircleRight, FaArrowAltCircleLeft } from \"react-icons/fa\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Slider = ({\n  slides\n}) => {\n  _s();\n\n  const [current, setCurrent] = useState(0);\n  const length = slides.length;\n  return [current, (current + 1) % length, (current + 2) % length, (current + 3) % length, (current + 4) % length, (current + 5) % length, (current + 6) % length, (current + 7) % len, (current + 8) % len, (current + 9) % len]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  // [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  // [3, 4, 0, 1, 2, 3, 4, 5, 6, 7]\n  // pick x from array, when array ends, go back to start\n\n  const nextSlide = () => {\n    //if length-1 this is last slide so returns to 0= first slide continuous loop\n    setCurrent(current === length - 1 ? 0 : current + 1); //else current + next in array\n  };\n\n  const prevSlide = () => {\n    //if current is first slide count backwards in array from first \n    setCurrent(current === 0 ? length - 1 : current - 1); //else count backwards from slide your on now\n  };\n\n  console.log(current);\n\n  if (!Array.isArray(slides) || slides.length <= 0) {\n    return null; //in case no array or no slides\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"slider\",\n    children: [/*#__PURE__*/_jsxDEV(FaArrowAltCircleLeft, {\n      className: \"left-arrow\",\n      onClick: prevSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FaArrowAltCircleRight, {\n      className: \"right-arrow\",\n      onClick: nextSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), slides.map((slide, index) => {\n      //  return <img src={slide.image} alt={slide.alt} className=\"slide active\" />  // all images\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: index === current ? \"slide active\" : \"slide\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this);\n    }), showIndexes.map(index => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: slides[index].image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Slider, \"8+O75ArtRNvpQgzeZSk5wKohTHI=\");\n\n_c = Slider;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["C:/Users/um3is/Desktop/Projects/Projects/react-two/src/Slider.js"],"names":["React","useState","FaArrowAltCircleRight","FaArrowAltCircleLeft","Slider","slides","current","setCurrent","length","len","nextSlide","prevSlide","console","log","Array","isArray","map","slide","index","showIndexes","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,gBAA5D;AACA,OAAO,WAAP;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAC7B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMO,MAAM,GAAGH,MAAM,CAACG,MAAtB;AAEF,SAAO,CACLF,OADK,EAEL,CAACA,OAAO,GAAG,CAAX,IAAeE,MAFV,EAGL,CAACF,OAAO,GAAG,CAAX,IAAeE,MAHV,EAIL,CAACF,OAAO,GAAG,CAAX,IAAeE,MAJV,EAKL,CAACF,OAAO,GAAG,CAAX,IAAeE,MALV,EAML,CAACF,OAAO,GAAG,CAAX,IAAeE,MANV,EAOL,CAACF,OAAO,GAAG,CAAX,IAAeE,MAPV,EAQL,CAACF,OAAO,GAAG,CAAX,IAAeG,GARV,EASL,CAACH,OAAO,GAAG,CAAX,IAAeG,GATV,EAUL,CAACH,OAAO,GAAG,CAAX,IAAeG,GAVV,CAAP,CAJ+B,CAqB7B;AACA;AACA;AACA;;AAGA,QAAMC,SAAS,GAAG,MAAM;AAAG;AACzBH,IAAAA,UAAU,CAACD,OAAO,KAAKE,MAAM,GAAG,CAArB,GAAyB,CAAzB,GAA6BF,OAAO,GAAG,CAAxC,CAAV,CADsB,CACkC;AACzD,GAFD;;AAIA,QAAMK,SAAS,GAAG,MAAM;AAAK;AAC3BJ,IAAAA,UAAU,CAACD,OAAO,KAAK,CAAZ,GAAgBE,MAAM,GAAG,CAAzB,GAA6BF,OAAO,GAAG,CAAxC,CAAV,CADsB,CACgC;AACvD,GAFD;;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;;AAEA,MAAI,CAACQ,KAAK,CAACC,OAAN,CAAcV,MAAd,CAAD,IAA0BA,MAAM,CAACG,MAAP,IAAiB,CAA/C,EAAkD;AAChD,WAAO,IAAP,CADgD,CACnC;AACd;;AAKD,sBACE;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA,4BACE,QAAC,oBAAD;AAAsB,MAAA,SAAS,EAAC,YAAhC;AAA6C,MAAA,OAAO,EAAEG;AAAtD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,qBAAD;AAAuB,MAAA,SAAS,EAAC,aAAjC;AAA+C,MAAA,OAAO,EAAED;AAAxD;AAAA;AAAA;AAAA;AAAA,YAFF,EAIML,MAAM,CAACW,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7B;AACF,0BACE;AACE,QAAA,SAAS,EAAEA,KAAK,KAAKZ,OAAV,GAAoB,cAApB,GAAqC;AADlD,SAEOY,KAFP;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAVG,CAJN,EAgBGC,WAAW,CAACH,GAAZ,CAAiBE,KAAD,iBAEf;AAAK,MAAA,GAAG,EAAEb,MAAM,CAACa,KAAD,CAAN,CAAcE;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFD,CAhBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAnED;;GAAMhB,M;;KAAAA,M;AAqEN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\r\n// import SliderData from \"./SliderData\";\r\n// import SliderDataTwo from \"./SliderDataTwo\";\r\nimport { FaArrowAltCircleRight, FaArrowAltCircleLeft } from \"react-icons/fa\";\r\nimport \"./App.css\";\r\n\r\nconst Slider = ({ slides }) => {\r\n  const [current, setCurrent] = useState(0);\r\n  const length = slides.length;\r\n\r\nreturn [\r\n  current,\r\n  (current + 1) %length,\r\n  (current + 2) %length,\r\n  (current + 3) %length,\r\n  (current + 4) %length,\r\n  (current + 5) %length,\r\n  (current + 6) %length,\r\n  (current + 7) %len,\r\n  (current + 8) %len,\r\n  (current + 9) %len,\r\n\r\n]\r\n  \r\n\r\n \r\n\r\n  // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n  // [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\n  // [3, 4, 0, 1, 2, 3, 4, 5, 6, 7]\r\n  // pick x from array, when array ends, go back to start\r\n\r\n\r\n  const nextSlide = () => {  //if length-1 this is last slide so returns to 0= first slide continuous loop\r\n    setCurrent(current === length - 1 ? 0 : current + 1);   //else current + next in array\r\n  };\r\n\r\n  const prevSlide = () => {    //if current is first slide count backwards in array from first \r\n    setCurrent(current === 0 ? length - 1 : current - 1); //else count backwards from slide your on now\r\n  };\r\n\r\n  console.log(current);\r\n\r\n  if (!Array.isArray(slides) || slides.length <= 0) {\r\n    return null; //in case no array or no slides\r\n  }\r\n\r\n  \r\n \r\n\r\n  return (\r\n    <section className=\"slider\">\r\n      <FaArrowAltCircleLeft className=\"left-arrow\" onClick={prevSlide} />\r\n      <FaArrowAltCircleRight className=\"right-arrow\" onClick={nextSlide} />\r\n      {/* {SliderData.map((slide, index) => { */}\r\n         {slides.map((slide, index) => {\r\n          //  return <img src={slide.image} alt={slide.alt} className=\"slide active\" />  // all images\r\n        return (\r\n          <div\r\n            className={index === current ? \"slide active\" : \"slide\"}\r\n            key={index}\r\n          >\r\n            \r\n          </div>\r\n        ); \r\n      })}\r\n\r\n      {showIndexes.map((index) => (\r\n     \r\n        <img src={slides[index].image} />\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n"]},"metadata":{},"sourceType":"module"}